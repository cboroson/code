name: Provision Customer

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # Required inputs
    inputs:
      customer_short_name:
        description: 'Customer short name'
        required: true
      jira_issue:
        description: 'Jira issue that triggered this action'
        required: false
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build:
    name: Read and parse configuration
    runs-on: ubuntu-latest
    environment: testing
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Checks-out a separate repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          repository: cboroson/configuration
          path: 'configuration'
          token: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Parse Json File
        id: parse_json
        shell: pwsh
        run: ./scripts/parseConfig.ps1 -configFile "./configuration/${{ github.event.inputs.customer_short_name }}.json"
         
      - name: Display results
        uses: Amadevus/pwsh-script@v2.0.1
        id: display_results
        with:
          script: |
            Write-Output "We can now run terraform commands or other scripts using the configuration that is saved in"
            Write-Output "the evironment variables."
            Write-Output ""
            Write-Output "For example:"
            Write-Output "terraform apply \"
            Write-Output "  -var customer_short_name=$Env:VOD_customer_short_name \"
            Write-Output "  -var DB_server_name=$Env:VOD_DB_server_name"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -list=true -write=false -diff=true -check=true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color > plan.log
        continue-on-error: true

      - name: Login
        uses: atlassian/gajira-login@master
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: attach plan output to Jira issue
        run: curl -D- -u ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} -X POST -H "X-Atlassian-Token: nocheck" -F "file=plan.log" http://${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ github.event.inputs.jira_issue }}/attachments

      - name: Transition issue
        uses: atlassian/gajira-transition@master
        with:
          issue: ${{ github.event.inputs.jira_issue }}
          transition: "Review"
